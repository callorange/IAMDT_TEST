"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/


로컬 개발 및 실행을 위한 환경설정
"""

import os
import json
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
ROOT_DIR = BASE_DIR.parent

# local.json 파일 로드
# SECRET_KEY등 중요설정값을 외부 파일로 지정
# DJANGO_SECRET_PATH 가 있다면 해당 경로 우선
CONFIG_JSON = ROOT_DIR / ".secrets" / "local.json"

DJANGO_SECRET_PATH = os.environ.get("DJANGO_SECRET_PATH")
if DJANGO_SECRET_PATH:
    CONFIG_JSON = Path(DJANGO_SECRET_PATH).resolve()

with open(CONFIG_JSON) as f:
    CONFIG_OBJ = json.loads(f.read())

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 환경변수 DJANGO_SECRET_KEY 가 있다면 환경변수 우선
SECRET_KEY = CONFIG_OBJ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

AUTH_USER_MODEL = "iamdt.User"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd party
    "rest_framework",  # djangorestframework
    "drf_spectacular",  # drf-spectacular
    "django_filters",  # django_filters
    "django_extensions",  # django_extensions
    "silk",  # django-silk
    # iamdt Coding Test
    "iamdt",  # Model App
    "iamdt_api",  # API App
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "silk.middleware.SilkyMiddleware",  # django-silk
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "ko-KR"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = ROOT_DIR / "static"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = ROOT_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ADMIN 생성용 값 설정
SUPERUSER_NAME = CONFIG_OBJ["SUPERUSER_NAME"]
SUPERUSER_PASS = CONFIG_OBJ["SUPERUSER_PASS"]
SUPERUSER_EMAIL = CONFIG_OBJ["SUPERUSER_EMAIL"]

# DRF Setting
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # 'rest_framework.authentication.BasicAuthentication',
        "rest_framework.authentication.SessionAuthentication",
        # 'rest_framework.authentication.TokenAuthentication',
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        # 'rest_framework.parsers.FormParser',
        # 'rest_framework.parsers.MultiPartParser'
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        # 'rest_framework.permissions.AllowAny',
        # "rest_framework.permissions.IsAuthenticated",
        "rest_framework.permissions.IsAdminUser",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "iamdt_api.pagination.ApiPageNumberPagination",
    "PAGE_SIZE": 10,
}

# drf-spectacular
SPECTACULAR_SETTINGS = {
    "TITLE": "IAMDT_TEST",
    "DESCRIPTION": "아이엠디티 코딩테스트 프로젝트",
    "VERSION": "0.1.0",
    "SERVE_INCLUDE_SCHEMA": False,
    # OTHER SETTINGS
    "ENUM_NAME_OVERRIDES": {
        # 'CurrencyEnum': 'import_path.CurrencyContainer.choices',
        "EnumUserType": "iamdt.models.User.UserType",
        "EnumMessengerType": "iamdt.models.User.MessengerType",
        "EnumMedicalStage": "iamdt.models.choices.MedicalStage",
        "EnumMedicalStageStatus": "iamdt.models.choices.MedicalStageStatus",
    },
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "displayOperationId": True,
    },
}

# django-silk
SILKY_PYTHON_PROFILER = True
SILKY_PYTHON_PROFILER_RESULT_PATH = MEDIA_ROOT / "silk"
SILKY_AUTHENTICATION = True  # User must login
SILKY_AUTHORISATION = True  # User must have permissions
SILKY_INTERCEPT_PERCENT = 100
SILKY_MAX_RECORDED_REQUESTS = 20

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "simple2": {"format": "%(asctime)s [%(levelname)s] %(message)s"},
        "standard": {"format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"},
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple2",
        },
        "notification_file": {
            "level": "INFO",
            "encoding": "utf-8",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_DIR / "logs/notification.history",
            "maxBytes": 1024 * 1024 * 5,
            "backupCount": 5,
            "formatter": "standard",
        },
    },
    "loggers": {
        "iamdt_util.notification": {
            "handlers": ["console", "notification_file"],
            "level": "INFO",
        }
    },
}
